//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CybEmptrackersystem
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CybEmpTrackerSystemEntities : DbContext
    {
        public CybEmpTrackerSystemEntities()
            : base("name=CybEmpTrackerSystemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<EmployeeDetail> EmployeeDetails { get; set; }
        public virtual DbSet<SwipeInOutDetail> SwipeInOutDetails { get; set; }
        public virtual DbSet<TotalHoursInfo> TotalHoursInfoes { get; set; }
    
        public virtual int AddorEditEmployeeDetails(Nullable<int> employeeID, string firstName, string lastName, Nullable<int> age, string gender, string department, Nullable<bool> isActive)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddorEditEmployeeDetails", employeeIDParameter, firstNameParameter, lastNameParameter, ageParameter, genderParameter, departmentParameter, isActiveParameter);
        }

        public virtual int calculate_total_hours(Nullable<int> employee_id, Nullable<System.DateTime> date)
        {
            var employee_idParameter = employee_id.HasValue ?
                new ObjectParameter("employee_id", employee_id) :
                new ObjectParameter("employee_id", typeof(int));

            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));

            var completedMinutesParameter = new ObjectParameter("completed_minutes", typeof(int));

            ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("calculate_total_hours", employee_idParameter, dateParameter, completedMinutesParameter);

            return (int)completedMinutesParameter.Value;
        }


        public virtual int InsertOrUpdateSwipeOut(Nullable<System.DateTime> swipeDate, Nullable<System.TimeSpan> swipeOut, Nullable<int> employeeID)
        {
            var swipeDateParameter = swipeDate.HasValue ?
                new ObjectParameter("SwipeDate", swipeDate) :
                new ObjectParameter("SwipeDate", typeof(System.DateTime));
    
            var swipeOutParameter = swipeOut.HasValue ?
                new ObjectParameter("SwipeOut", swipeOut) :
                new ObjectParameter("SwipeOut", typeof(System.TimeSpan));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOrUpdateSwipeOut", swipeDateParameter, swipeOutParameter, employeeIDParameter);
        }
    
        public virtual int InsertSwipeIn(Nullable<System.DateTime> swipeDate, Nullable<System.TimeSpan> swipeIn, Nullable<int> employeeID)
        {
            var swipeDateParameter = swipeDate.HasValue ?
                new ObjectParameter("SwipeDate", swipeDate) :
                new ObjectParameter("SwipeDate", typeof(System.DateTime));
    
            var swipeInParameter = swipeIn.HasValue ?
                new ObjectParameter("SwipeIn", swipeIn) :
                new ObjectParameter("SwipeIn", typeof(System.TimeSpan));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSwipeIn", swipeDateParameter, swipeInParameter, employeeIDParameter);
        }
    
        public virtual int UpdateSwipeIn(Nullable<System.DateTime> swipeDate, Nullable<System.TimeSpan> swipeIn, Nullable<int> employeeID)
        {
            var swipeDateParameter = swipeDate.HasValue ?
                new ObjectParameter("SwipeDate", swipeDate) :
                new ObjectParameter("SwipeDate", typeof(System.DateTime));
    
            var swipeInParameter = swipeIn.HasValue ?
                new ObjectParameter("SwipeIn", swipeIn) :
                new ObjectParameter("SwipeIn", typeof(System.TimeSpan));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSwipeIn", swipeDateParameter, swipeInParameter, employeeIDParameter);
        }
    }
}
